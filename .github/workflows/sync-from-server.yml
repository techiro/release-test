name: Sync Changes from Server Repository

on:
  repository_dispatch:
    types: [server-release-updated]

jobs:
  sync-changes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Set up Git
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

      - name: Print event information
        run: |
          echo "Event received from: ${{ github.event.client_payload.repository || 'N/A' }}"
          echo "Ref: ${{ github.event.client_payload.ref || 'main' }}"
          echo "Commit SHA: ${{ github.event.client_payload.sha || 'N/A' }}"
          echo "Message: ${{ github.event.client_payload.message || 'No message provided' }}"

      - name: Checkout server repository
        uses: actions/checkout@v3
        with:
          repository: techiro/release-test-server
          ref: ${{ github.event.client_payload.ref || 'main' }}
          token: ${{ secrets.RELEASE_TEST_SERVER_TOKEN }}
          path: server



      - name: Copy changes from server repository
        run: |
          echo "Copying changes from server repository"
            if [ -f "./server/changes.md" ]; then
            cp -f ./server/changes.md ./changes.md
            echo "Copied changes.md file from server to source repository"
            else
            echo "No changes.md file found in server repository"
          fi


      - name: Copy release-server.md from server repository
        run: |
          echo "Copying release-server.md from server repository"
          if [ -f "./server/release-server.md" ]; then
            cp -f ./server/release-server.md ./release-server.md
            echo "Copied release-server.md file from server to source repository"
          else
            echo "No release-server.md file found in server repository"
          fi

      - name: Remove server folder
        run: |
          echo "Removing ./server folder"
          rm -rf ./server

      - name: Close pull request if already exists
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Closing existing pull request if it exists"
          PR_NUMBER=$(gh pr list --state open --json number,title,headRefName --jq '.[] | select(.headRefName == "sync-release-from-server") | .number')
          if [ -n "$PR_NUMBER" ]; then
            echo "Closing pull request #$PR_NUMBER"
            gh pr close "$PR_NUMBER" --delete-branch
          else
            echo "No open pull request found for branch sync-release-from-server"
          fi

      - name: Commit and push changes
        run: |
          BRANCH_NAME="sync-release-from-server"

          # Check if branch already exists
          existing_branch=$(git ls-remote --heads origin "$BRANCH_NAME")
          if [ -n "$existing_branch" ]; then
            echo "$BRANCH_NAME が存在していたので削除します。"
            git push origin --delete "$BRANCH_NAME"
          fi
          git checkout -b "$BRANCH_NAME"
          git add .
          if [ -z "$(git status --porcelain)" ]; then
            echo "No changes to commit"
            exit 0
          fi

          # Get commit message from event payload or use default
          COMMIT_MSG="${{ github.event.client_payload.message || 'Sync changes from release-test-server' }}"

          echo "Committing changes"
          git commit -m "$COMMIT_MSG"

          echo "Pushing changes"
          git push origin "$BRANCH_NAME"

      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Creating Pull Request"
          gh pr create \
            -H sync-release-from-server \
            -B main \
            -t 'chore: Update API type definitions' \
            -b 'API type updated! Exciting updates included.'
