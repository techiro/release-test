name: Hotfix Deployment Workflow

on:
  issue_comment:
    types: [created, edited]
    # releaseブランチか、hotfixブランチでのみ実行

permissions:
  contents: write # タグ生成のために必要
  issues: write # PRのコメントに必要
  pull-requests: write # PRのコメントに必要
  checks: read # workflowの実行結果を取得するために必要

jobs:
  deploy-command:
    if: |
      github.event.issue.pull_request &&
      startsWith(github.event.comment.body, '/hotfix')
    runs-on: ubuntu-latest
    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 全ての履歴・タグをフェッチ

      - name: PR コメントに返信
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ホットフィックスデプロイを開始しました。'
            })

      - name: Set head ref
        run: |
            echo "head_ref=${{ github.ref }}" >> "$GITHUB_OUTPUT"

      - name: Find pull request ref with comment
        uses: xt0rted/pull-request-comment-branch@e8b8daa837e8ea7331c0003c9c316a64c6d8b0b1 # v3.0.0
        id: find-ref
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.find-ref.outputs.head_ref }}
          fetch-depth: 0

      # pubspec.yaml から version を取得
      - name: Get version from pubspec.yaml
        id: pubspec
        shell: bash
        run: |
          echo "version=$(grep 'version:' pubspec.yaml | sed 's/version: //g' | tr -d ' ')" >> $GITHUB_OUTPUT


      - name: 最新のリリースタグを取得
        id: get-latest-tag
        run: |
          # 最新のリリースタグを取得(タグがmainにない場合でも動作する)
          latest_tag=$(git describe --abbrev=0 --tags `git rev-list --tags --max-count=1`)
          echo "Latest tag: $latest_tag"
          echo "tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: タグが既に存在するか確認
        id: check_tag
        run: |
          version="${{ steps.pubspec.outputs.version }}"
          if [ -z "$version" ]; then
            echo "exists=false" >> $GITHUB_OUTPUT
          elif git tag --list | grep -q "$version"; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: タグが存在する場合コメント
        if: steps.check_tag.outputs.exists == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "> [!WARNING]\n> [タグ ${{ steps.pubspec.outputs.version }}](https://github.com/techiro/release-test/tags) は既に存在します。タグを削除して再試行してください。"
            })

      - name: Generate GitHub App Token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: タグが存在しない場合、新しいタグを作成
        if: steps.check_tag.outputs.exists == 'false'
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          git tag "${{ steps.pubspec.outputs.version }}"
          git push origin "${{ steps.pubspec.outputs.version }}"
          echo "tag_created=true" >> $GITHUB_OUTPUT

      - name: PR コメントに返信
        if: steps.check_tag.outputs.exists == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '> [!IMPORTANT]\n> [タグ ${{ steps.pubspec.outputs.version }}](https://github.com/techiro/release-test/tags) を作成しました。'
            })
