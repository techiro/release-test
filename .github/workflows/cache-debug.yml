name: Cache Debug Workflow

# This workflow is triggered manually via the GitHub UI
on:
  workflow_dispatch:
    inputs:
      cache_key_suffix:
        description: 'Optional suffix to add to cache keys for testing different scenarios'
        required: false
        default: ''
      force_cache_miss:
        description: 'Force a cache miss to test cache creation'
        required: false
        default: 'false'
        type: boolean
      dependency_file:
        description: 'Which dependency file to use for cache key generation'
        required: false
        default: 'pubspec.lock'
        type: choice
        options:
          - pubspec.lock
          - pubspec.yaml
          - .tool-versions

jobs:
  # Job 1: Basic cache demonstration
  basic-cache-demo:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 1: Cache demonstration with detailed explanation
      - name: Cache Pub Dependencies
        id: cache-pub
        uses: actions/cache@v3
        with:
          # Path to the directory that will be cached
          path: |
            ~/.pub-cache
            .dart_tool/
          # The cache key is composed of multiple parts:
          # 1. A prefix to identify this specific cache
          # 2. The runner OS to avoid cross-OS cache issues
          # 3. The hash of the dependency file to invalidate cache when dependencies change
          # 4. Optional user-provided suffix for testing
          key: pub-deps-${{ runner.os }}-${{ hashFiles(format('{0}', inputs.dependency_file)) }}-${{ inputs.cache_key_suffix }}
          # Restore keys are used when the exact key is not found
          # They are tried in order until a cache hit occurs
          restore-keys: |
            pub-deps-${{ runner.os }}-
            pub-deps-

      # Step 2: Output cache status for debugging
      - name: Debug Cache Status
        run: |
          echo "============ CACHE DEBUG INFO ============"
          echo "Cache hit: ${{ steps.cache-pub.outputs.cache-hit == 'true' && '✅ Yes' || '❌ No' }}"
          echo "Cache key: pub-deps-${{ runner.os }}-${{ hashFiles(format('{0}', inputs.dependency_file)) }}-${{ inputs.cache_key_suffix }}"
          echo "Cache restore keys:"
          echo "  - pub-deps-${{ runner.os }}-"
          echo "  - pub-deps-"
          echo "Dependency file used: ${{ inputs.dependency_file }}"
          echo "Force cache miss: ${{ inputs.force_cache_miss }}"
          echo "Cache suffix: ${{ inputs.cache_key_suffix }}"
          echo "==========================================="

      # Step 3: Simulate dependency installation (only runs on cache miss)
      - name: Install Dependencies (on cache miss)
        if: steps.cache-pub.outputs.cache-hit != 'true' || inputs.force_cache_miss == 'true'
        run: |
          echo "Cache miss detected or forced. Installing dependencies..."
          echo "This would normally run 'pub get' or similar command"
          # Create a dummy file to demonstrate cache content changes
          mkdir -p ~/.pub-cache
          echo "Installed at $(date)" > ~/.pub-cache/install-timestamp.txt
          echo "Dependencies installed successfully!"

      # Step 4: Show cache contents
      - name: Show Cache Contents
        run: |
          echo "============ CACHE CONTENTS ============"
          if [ -d "~/.pub-cache" ]; then
            ls -la ~/.pub-cache || echo "Directory not accessible"
            if [ -f "~/.pub-cache/install-timestamp.txt" ]; then
              echo "Install timestamp: $(cat ~/.pub-cache/install-timestamp.txt)"
            fi
          else
            echo "Cache directory does not exist yet"
          fi
          echo "========================================"

  # Job 2: Advanced cache demonstration with multiple caches
  advanced-cache-demo:
    runs-on: ubuntu-latest
    needs: basic-cache-demo
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 1: Primary cache for dependencies
      - name: Cache Primary Dependencies
        id: cache-primary
        uses: actions/cache@v3
        with:
          path: ~/.primary-cache
          key: primary-${{ runner.os }}-${{ hashFiles(format('{0}', inputs.dependency_file)) }}-${{ inputs.cache_key_suffix }}

      # Step 2: Secondary cache with different key
      - name: Cache Secondary Dependencies
        id: cache-secondary
        uses: actions/cache@v3
        with:
          path: ~/.secondary-cache
          # Different hash source to demonstrate independent caching
          key: secondary-${{ runner.os }}-${{ hashFiles('.gitignore') }}-${{ inputs.cache_key_suffix }}

      # Step 3: Create cache content if cache miss
      - name: Create Cache Content
        run: |
          mkdir -p ~/.primary-cache ~/.secondary-cache
          
          if [ "${{ steps.cache-primary.outputs.cache-hit }}" != "true" ] || [ "${{ inputs.force_cache_miss }}" == "true" ]; then
            echo "Creating primary cache content at $(date)" > ~/.primary-cache/created.txt
            echo "Cache size: $(( RANDOM % 1000 + 100 ))KB" >> ~/.primary-cache/created.txt
          fi
          
          if [ "${{ steps.cache-secondary.outputs.cache-hit }}" != "true" ] || [ "${{ inputs.force_cache_miss }}" == "true" ]; then
            echo "Creating secondary cache content at $(date)" > ~/.secondary-cache/created.txt
            echo "Cache size: $(( RANDOM % 1000 + 100 ))KB" >> ~/.secondary-cache/created.txt
          fi

      # Step 4: Comprehensive cache debug information
      - name: Comprehensive Cache Debug
        run: |
          echo "=============== CACHE SYSTEM EXPLANATION ==============="
          echo "GitHub Actions Cache Components:"
          echo ""
          echo "1. Cache Key: Unique identifier for a specific cache"
          echo "   - Format: {prefix}-{runner.os}-{hash}-{suffix}"
          echo "   - Example: pub-deps-Linux-a1b2c3d4-custom"
          echo ""
          echo "2. Restore Keys: Fallback keys when exact match isn't found"
          echo "   - Tried in order until a match is found"
          echo "   - Partial matches are accepted (prefix matching)"
          echo ""
          echo "3. Cache Paths: Directories/files to be cached"
          echo "   - Can include multiple paths"
          echo "   - Supports glob patterns"
          echo ""
          echo "4. Cache Hit/Miss:"
          echo "   - Hit: Exact cache key match found"
          echo "   - Partial Hit: Restore key match found"
          echo "   - Miss: No matching cache found"
          echo ""
          echo "5. Cache Eviction:"
          echo "   - GitHub has a 10GB limit per repository"
          echo "   - Least recently used caches are evicted first"
          echo "   - Caches unused for 7 days are automatically removed"
          echo "========================================================"
          
          echo ""
          echo "=============== CURRENT CACHE STATUS ==============="
          echo "Primary Cache:"
          echo "  - Hit: ${{ steps.cache-primary.outputs.cache-hit == 'true' && '✅ Yes' || '❌ No' }}"
          echo "  - Key: primary-${{ runner.os }}-${{ hashFiles(format('{0}', inputs.dependency_file)) }}-${{ inputs.cache_key_suffix }}"
          if [ -f ~/.primary-cache/created.txt ]; then
            echo "  - Content: $(cat ~/.primary-cache/created.txt)"
          else
            echo "  - Content: Not available"
          fi
          
          echo ""
          echo "Secondary Cache:"
          echo "  - Hit: ${{ steps.cache-secondary.outputs.cache-hit == 'true' && '✅ Yes' || '❌ No' }}"
          echo "  - Key: secondary-${{ runner.os }}-${{ hashFiles('.gitignore') }}-${{ inputs.cache_key_suffix }}"
          if [ -f ~/.secondary-cache/created.txt ]; then
            echo "  - Content: $(cat ~/.secondary-cache/created.txt)"
          else
            echo "  - Content: Not available"
          fi
          echo "===================================================="

  # Job 3: Cache invalidation demonstration
  cache-invalidation-demo:
    runs-on: ubuntu-latest
    needs: advanced-cache-demo
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 1: Create a unique cache key based on current time
      - name: Generate Unique Cache Key
        id: cache-key-gen
        run: |
          TIMESTAMP=$(date +%s)
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "Generated unique timestamp: $TIMESTAMP"

      # Step 2: Cache with timestamp-based key
      - name: Cache With Timestamp
        id: cache-timestamp
        uses: actions/cache@v3
        with:
          path: ~/.timestamp-cache
          # Using timestamp ensures this is always a cache miss
          key: timestamp-cache-${{ steps.cache-key-gen.outputs.timestamp }}
          # But we can still restore from previous runs
          restore-keys: |
            timestamp-cache-

      # Step 3: Demonstrate cache invalidation
      - name: Demonstrate Cache Invalidation
        run: |
          mkdir -p ~/.timestamp-cache
          echo "Cache created at $(date)" > ~/.timestamp-cache/info.txt
          echo "This cache will be a 'miss' on the next run because the timestamp changes" >> ~/.timestamp-cache/info.txt
          
          echo "=============== CACHE INVALIDATION ==============="
          echo "Cache invalidation occurs when:"
          echo ""
          echo "1. The cache key changes"
          echo "   - Current key: timestamp-cache-${{ steps.cache-key-gen.outputs.timestamp }}"
          echo "   - Next run will have a different timestamp"
          echo ""
          echo "2. The hash in the key changes"
          echo "   - Example: When dependencies are updated"
          echo "   - The hashFiles() function will produce a different result"
          echo ""
          echo "3. Manual cache clearing"
          echo "   - Via GitHub API or UI"
          echo ""
          echo "4. Cache expiration"
          echo "   - Caches unused for 7 days are removed"
          echo "   - 10GB repository limit may cause early eviction"
          echo "==================================================="
          
          if [ -f ~/.timestamp-cache/info.txt ]; then
            echo ""
            echo "Current cache content:"
            cat ~/.timestamp-cache/info.txt
          fi