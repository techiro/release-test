name: create release note workflow

on:
  pull_request:
    types: [labeled]

jobs:
  remove-label:
    if: github.event.label.name == 'create-release-note'
    runs-on: ubuntu-latest
    steps:
      - name: Remove create-release-note label
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.removeLabel({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'create-release-note'
            })

  create-release:
    if: github.event.label.name == 'create-release-note'
    runs-on: ubuntu-latest
    steps:
      - name: リポジトリのチェックアウト
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 最新のタグと1個前のタグを取得
        id: get-tags
        run: |
          # タグを日付順にソートし、上位2つのタグを取得
          all_tags=$(git tag --sort=-creatordate)
          latest_tag=$(echo "$all_tags" | head -n1)
          previous_tag=$(echo "$all_tags" | head -n2 | tail -n1)

          # タグが見つからない場合はステップを終了
          if [ -z "$latest_tag" ]; then
            echo "タグが見つかりません。リリースノートの作成をスキップします。"
            exit 1
          fi

          echo "最新のタグ: $latest_tag"
          echo "1個前のタグ: $previous_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT
          echo "previous_tag=$previous_tag" >> $GITHUB_OUTPUT

      - name: 既存のリリースを削除
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = '${{ steps.get-tags.outputs.latest_tag }}';
            try {
              // リリースIDを取得
              const releaseResponse = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tag
              });

              // リリースが存在する場合は削除
              if (releaseResponse && releaseResponse.data) {
                console.log(`既存のリリース (ID: ${releaseResponse.data.id}) を削除します`);
                await github.rest.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: releaseResponse.data.id
                });
                console.log('既存のリリースを削除しました');
              }
            } catch (error) {
              // リリースが見つからない場合はエラーを無視
              console.log('既存のリリースが見つからないか、削除中にエラーが発生しました:', error.message);
              console.log('新しいリリースを作成します');
            }

      - name: Generate custom release note
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LATEST_TAG: ${{ steps.get-tags.outputs.latest_tag }}
          PREVIOUS_TAG: ${{ steps.get-tags.outputs.previous_tag }}
        run: |
          FILE="release-note-${LATEST_TAG}.md"
          echo "## ${LATEST_TAG} — $(date '+%Y-%m-%d')" > "$FILE"
          echo "" >> "$FILE"
          echo "### What's Changed" >> "$FILE"

          # Collect merged PR numbers between previous and latest tag
          pr_numbers=$(git log --pretty=format:%s ${PREVIOUS_TAG}..${LATEST_TAG} | grep -oE '#[0-9]+' | tr -d '#' | sort -u)

          for pr in $pr_numbers; do
            pr_json=$(gh pr view "$pr" --json title,author)
            title=$(echo "$pr_json" | jq -r '.title')
            author=$(echo "$pr_json" | jq -r '.author.login')
            echo "- ![@${author}](https://github.com/${author}.png?size=20) ${title} (#${pr})" >> "$FILE"
          done
      - name: リリースノートの作成
        uses: ncipollo/release-action@440c8c1cb0ed28b9f43e4d1d670870f059653174 # v1.16.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.get-tags.outputs.latest_tag }}
          makeLatest: true
          bodyFile: release-note-${{ steps.get-tags.outputs.latest_tag }}.md
          generateReleaseNotes: false
