name: Hotfix Workflow

on:
  workflow_dispatch:
    inputs:
      build_number:
        type: string
        required: false
        description: 'ビルド番号を指定してください'

permissions:
  contents: write

jobs:
  create-hotfix-branch:
    runs-on: ubuntu-latest
    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 最新のリリースタグを取得
        id: get-latest-tag
        run: |
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "Latest tag: $latest_tag"
          echo "tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: 既存ブランチを削除
        run: |
          branch_name="hotfix-from-${{ steps.get-latest-tag.outputs.tag }}"
          # リモートにブランチが存在するかチェック
          existing_branch=$(git ls-remote --heads origin "$branch_name")
          if [ -n "$existing_branch" ]; then
            echo "既存のブランチが見つかりました: $branch_name を削除します。"
            git push origin --delete "$branch_name"
          else
            echo "既存のブランチはありません。"
          fi

      - name: ホットフィックスブランチを作成
        id: create-hotfix
        run: |
          branch_name="hotfix-from-${{ steps.get-latest-tag.outputs.tag }}"
          echo "switch from ${{ steps.get-latest-tag.outputs.tag }} to $branch_name"
          git checkout -b "$branch_name" ${{ steps.get-latest-tag.outputs.tag }}
          git push --set-upstream origin "$branch_name"
          echo "branch_name=$branch_name" >> $GITHUB_OUTPUT

      - name: Checkout the new branch
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.create-hotfix.outputs.branch_name }}
          fetch-depth: 0

      - name: ホットフィックスのビルド番号を取得
        id: hotfix-build-number
        run: |
          latest_tag_build_number=$(echo "${{ steps.get-latest-tag.outputs.tag }}" | sed -e 's/.*-//')
          build_number="${{ github.event.inputs.build_number }}"
          if [ -z "$build_number" ]; then
          build_number=$(( latest_tag_build_number + 100 ))
          echo "ビルド番号が指定されていません。計算されたビルド番号を使用します。"
          fi
          echo "latest_tag_build_number=$latest_tag_build_number" >> "$GITHUB_OUTPUT"
          echo "build_number=$build_number" >> "$GITHUB_OUTPUT"

      - name: Dartをセットアップする
        uses: ./.github/actions/setup-dart


      - name: バージョンをバンプする
        run: |
          dart pub global activate cider
          cider bump patch --build=${{ steps.hotfix-build-number.outputs.build_number }}

      - name: 更新後のバージョンを取得して出力する
        id: bump-version
        run: |
          echo "pubspec_version=$(cider version | sed -e 's/.*-//')" >> "$GITHUB_OUTPUT"

      - name: Configure Git user
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add pubspec.yaml pubspec.lock
          git status

      - name: コミットとプッシュ
        run: |
          git commit -m "Bump version for hotfix" || echo "No changes to commit"
          git push --set-upstream origin ${{ steps.create-hotfix.outputs.branch_name }}

      - name: Create PR
        env:
          GH_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
        run: |
          gh pr create \
            --draft \
            --base main \
            --head ${{ steps.create-hotfix.outputs.branch_name }} \
            --label "A-build" \
            --title "release: Hotfix ${{ steps.bump-version.outputs.pubspec_version}}" \
            --body-file "./.github/hotfix-pr-body.md"
